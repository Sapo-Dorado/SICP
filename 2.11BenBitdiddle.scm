(define (add-interval x y)
(make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))


(define (div-interval x y)
  (mul-interval
   x
   (make-interval (/ 1.0 (upper-bound y))
                  (/ 1.0 (lower-bound y)))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
       (p2 (* (lower-bound x) (upper-bound y)))
       (p3 (* (upper-bound x) (lower-bound y)))
       (p4 (* (upper-bound x) (upper-bound y))))
       (make-interval (min p1 p2 p3 p4)
                      (max p1 p2 p3 p4))))

(define (make-interval a b)
  (cons a b))

(define (lower-bound x)
  (car x))

(define (upper-bound x)
  (cdr x))

(define (my-ben-bit-diddle-mult a b)
  (define (sign x)
    (if (> x 0)
      1
      0))
  (let ((a (+ (sign (lower-bound a)) (sign(upper-bound a))))
        (b (+ (sign(lower-bound b)) (sign(upper-bound b))))
        (alo (lower-bound a))
        (ahi (upper-bound a))
        (blo (lower-bound b))
        (bhi (upper-bound b)))
  (cond ((or (and (= a 2) (= b 2)) (and (= a 0) (= b 0)))
           (make-interval (* alo blo) (* ahi bhi)))
         ((and (= a 2) (= b 1))
            (make-interval (* ahi blo) (* ahi bhi)))
         ((and (= a 2) (= b 0))
            (make-interval (* ahi blo) (* alo bhi)))
         ((and (= a 1) (= b 2))
            (make-interval (* alo bhi) (* ahi bhi)))
         ((and (= a 1) (= b 1))
            (make-interval (min (* ahi blo) (* alo bhi)) (max (* alo blo) (* ahi bhi))))
         ((and (= a 1) (= b 0))
            (make-interval (* ahi blo) (* alo blo)))
         ((and (= a 0) (= b 2))
            (make-interval (* alo bhi) (* ahi blo)))
         ((and (= a 0) (= b 1))
            (make-interval (* alo bhi) (* alo blo))))))


(define a (make-interval 2 4))
(define b (make-interval -2 4))
(define c (make-interval -4 -2))
(mul-interval a a)
(mul-interval a b)
(mul-interval a c)
(mul-interval b a)
(mul-interval b b)
(mul-interval b c)
(mul-interval c a)
(mul-interval c b)
(mul-interval c c)
