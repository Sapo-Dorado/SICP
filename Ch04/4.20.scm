(define (letrec? exp) (tagged-list exp 'letrec))
(define (letrec-params exp) (cadr exp))
(define (letrec-body exp) (cddr exp))
(define (letrec->let exp)
  (let* ((params (letrec-params exp))
         (vars (map car params))
         (vals (map cdr params)))
    (define (make-params vars)
      (define (iter exp output)
        (if (null? exp)
            output
            (iter (cdr exp) (append output (list (list (car exp) '*unassigned*))))))
      (iter vars '()))
    (define (make-body vars vals)
      (define (make-assignments vars vals output)
        (if (null? vars)
            output
            (make-assignments (cdr vars) (cdr vals) (append output (list (list 'set! (car vars) (car vals)))))))
      (append (make-assignments vars vals '()) (letrec-body exp)))
    (make-let (make-params vars) (make-body vars vals))))
