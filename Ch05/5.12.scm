;;part b
(define (make-save inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (cons reg (get-contents reg))) (advance-pc pc))))
(define (make-restore inst machine stack pc)
  (let ((reg (get-register machine
                           (stack-inst-reg-name inst))))
    (lambda ()
      (let ((popped (pop stack)))
        (if (eq? reg (car popped))
            (begin (set-contents! reg (cdr (pop stack))) (advance-pc pc))
            (error "popping for the wrong register" reg (car popped)))))))

;;part c is wrong but this is what I got before looking it up 
;;I did initialize incorrectly and should have created the stacks when registers are created

(define (make-machine register-names ops controller-text)
  (let ((machine (make-new-machine)))
    (for-each
      (lambda (register-name)
       ((machine 'allocate-register) register-name))
      register-names)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    ((machine 'initialize-stacks))
    machine))

(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
              (stacks (make-stacks))
              (the-instruction-sequence '()))
    (let ((the-ops '())
          (register-table
            (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name))
                                       register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin ((instruction-execution-proc (car insts))) (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
          ((eq? message 'install-instruction-sequence)
           (lambda (seq)
             (set! the-instruction-sequence seq)))
          ((eq? message 'allocate-register)
           allocate-register)
          ((eq? message 'get-register)
           lookup-register)
          ((eq? message 'install-operations) (lambda (ops)
                                               (set! the-ops (append the-ops ops))))
          ((eq? message 'stacks) stacks)
          ((eq? message 'operations) the-ops)
          ((eq? message 'initialize-stacks (stack 'initialize register-table)))
          (else (error "Unknown request: MACHINE" message))))
      dispatch)))


(define (make-stacks)
  (let ((s '()))
    (define (push x reg)
      (let ((specific-stack (assoc (reg 'name) s)))
            (set-cdr! specific-stack (cons x (cdr specific-stack)))))))

    (define (pop reg) 
      (let ((specific-stack (assoc (reg 'name) s)))
            (if (null? (cdr specific-stack))
                (error "Empty stack: POP")
                (let ((top (cadr specific-stack)))
                  (set-cdr! specific-stack (cddr specific-stack))
                        top))))
    (define (initialize regs)
      (for-each regs
                (lambda (reg)
                  (set! s (cons (cons reg (reg 'name)))))))
    (define (dispatch message)
      (cond ((eq? message 'push) (lambda (val reg) (push val reg)))
        ((eq? message 'pop) (lambda (reg) (pop reg)))
        ((eq? message 'initialize) (lambda (regs) (initialize regs)))
        (else (error "Unknown request: STACK" message))))
    dispatch))

(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set) (lambda (value) (set! contents value)))
            ((eq? message 'name) name)
            (else (error "Unknown request: REGISTER" message))))
    dispatch))
