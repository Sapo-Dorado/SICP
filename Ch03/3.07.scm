(define (make-vault balance)
  (define (get-balance)
    balance)
  (define (set-balance new-bal)
    (set! balance new-bal))
  (define (dispatchv m)
    (cond ((eq? m 'balance) get-balance)
          ((eq? m 'set-bal) set-balance)
          (else (error "Invalid command make-account:" m))))
  dispatchv)
(define (make-user password account)
  (let ((balance (lambda () ((account 'balance))))
        (set-bal (lambda (new) ((account 'set-bal) new))))
    (define (withdraw amount)
      (if (>= (balance) amount)
          (begin (set-bal (- (balance) amount))
                (balance))
          (error "Insufficient funds")))
    (define (deposit amount)
      (set-bal (+ (balance) amount))
      (balance))
    (define (dispatchu m pass)
      (if (eq? pass password)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              ((eq? m 'account) account)
              (else (error "Unknown request -- MAKE-ACCOUNT" m)))
        (error "Incorrect Password")))
    dispatchu))

(define (make-account balance password)
  (let ((account (make-vault balance)))
    (make-user password account)))

(define (make-joint-account original old-pass new-pass)
    (make-user new-pass (original 'account old-pass)))


(define a (make-account 200 'hey))

(define b (make-joint-account a 'hey 'hi))

((b 'deposit 'hi) 20)

((a 'withdraw 'hey) 10)
