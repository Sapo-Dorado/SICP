(define (serialized-exchange account1 account2)
    (let ((serializer1 (account1 'serializer))
          (serializer2 (account2 'serializer)))
        ((if (> (account1 'account-number) (account2 'account-number)) (serializer1 (serializer2 exchange)) (serializer2 (serializer1 exchange)))
      account1
      account2)))

(define (initialize-account-maker balance)
  (define (make-account-and-serializer balance account-number)
    (define (withdraw amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                balance)
          "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount)) balance)
        (let ((balance-serializer (make-serializer)))
          (define (dispatch m)
            (cond ((eq? m 'withdraw) withdraw)
                  ((eq? m 'deposit) deposit)
                  ((eq? m 'balance) balance)
                  ((eq? m 'serializer) balance-serializer)
                  ((eq? m 'account-number) account-number)
                  (else (error "Unknown request: MAKE-ACCOUNT" m))))
        dispatch))
  (define (num-access)
    (let ((num 0))
      (define (num)
        (set! num (+ num 1)))
      num))
  (let ((counter num-access))
    (define (make-account)
      (make-account-and-serializer balance (counter)))
    make-account))

(define account-maker (initialize-account-maker))


