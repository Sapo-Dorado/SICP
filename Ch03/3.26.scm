(define (make-table greater? less?)

  (let ((local-table (list 'table*)))
    (define (check-key record)
      (caar record))  
    (define (check-value record)
      (cadar record))
    (define (check-vault record)
      (car record))
    (define (upper record)
      (caddr record))
    (define (lower record)
      (cadr record))

    (define (lookup key)
      (define (iter table)
        (cond ((null? table) #f)
              ((eq? key (check-key table)) (check-value table))
              ((greater? key (check-key table)) (iter (upper table)))
              ((less? key (check-key table)) (iter (lower table)))))
      (iter (cdr local-table)))

    (define (insert! key value)
      (define (iter table)
        (cond ((eq? key (check-key table)) (set-cdr! (check-vault table) (list value)))
              ((greater? key (check-key table)) 
               (if (null? (upper table))
                 (set-car! (cddr table) (list (list key value) '() '()))
                 (iter (upper table))))
              ((less? key (check-key table)) 
                      (if (null? (lower table))
                        (set-car! (cdr table) (list (list key value) '() '()))
                        (iter (lower table))))))
      (if (null? (cdr local-table))
        (set-cdr! local-table (list (list key value) '() '()))
        (iter (cdr local-table))))

    (define (dispatch m)
      (cond ((eq? m 'insert!) insert!)
            ((eq? m 'lookup) lookup)
            ((eq? m 'show) local-table)
            (else (error "Error"))))
    dispatch))

(define num-table (make-table > <))
(define put (num-table 'insert!))
(define get (num-table 'lookup))
(define show (num-table 'show))

(put 5 'a)
(put 2 'b)
(put 7 'c)
(put 6 'p)
(get 5)
(get 2)
(get 7) 
(get 6)
show
