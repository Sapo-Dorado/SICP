(define (make-rat n d)
  (let ((g (gcd n d)))
       (if (or (and (> n 0) (> d 0)) (and (< n 0) (< d 0)))
         (cons (/ (abs n) g) (/ (abs d) g))
         (if (> n 0)
           (cons (/ (- 0 n) g) (/ (abs d) g))
           (cons (/ n g) (/ d g))))))
(car (make-rat 2 4))
(cdr (make-rat 2 4))
(car (make-rat -3 5))
(car (make-rat 3 -5))
